<?php

use Drupal\Core\Form\FormStateInterface;

function the_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_artist_edit_form' || $form_id == 'node_artist_form') {
    $form['actions']['submit']['#submit'][] = '_the_content_artist_form_submit_handler';
  }

  if (isset($form["field_dimensions"]['widget'][0])) {
    $arr = $form["field_dimensions"]['widget'][0];
    $arr['value']['#access'] = FALSE;
    $order = ['height', 'width', 'length'];
    $newOrder = [];
    foreach ($order as $key) {
      if (isset($arr[$key])) {
        $newOrder[$key] = $arr[$key];
      }
    }
    foreach ($arr as $key => $value) {
      if (!in_array($key, $order)) {
        $newOrder[$key] = $value;
      }
    }
    $form["field_dimensions"]['widget'][0] = $newOrder;
  }
}

/**
 * Custom submit handler for the 'artist' node type.
 */
function _the_content_artist_form_submit_handler(&$form, FormStateInterface $form_state) {
  try {
    $node = $form_state->getFormObject()->getEntity();
    $name_fields = ['field_name', 'field_name_asian'];
    $name_fields_values = array_map(function ($f) use ($node) {
      if (!$node->hasField($f)) return '';
      if ($node->get($f)->isEmpty()) return '';
      $field_values = $node->get($f)->get(0)->getValue();
      unset($field_values['title']);
      return trim(array_reduce($field_values, fn($c, $e) => "$c $e"));
    }, $name_fields);
    $node_title = trim(array_reduce($name_fields_values, fn($c, $f) => "$c $f"));
    $node->setTitle($node_title);
    $node->save();
  } catch (\Exception $e) {
    \Drupal::logger('the_content')->error('An error occurred: @message', ['@message' => $e->getMessage()]);
  }
}

function the_content_preprocess_field(&$vars) {
  # @TODO - move this into a separate module or class.
  // Provide functionality for the 'field_biography' Read More functions.
  if (($field_name = $vars["element"]["#field_name"])
    && $field_name === 'field_biography'
    && ($formatter = $vars["element"]["#formatter"])
    && ($entity = $vars["element"]["#object"])
    && !$entity->get('field_biography')->isEmpty()
  ) {
    if ($formatter === 'text_trimmed') {
      $vars["items"][0]['content']['#suffix'] = '<p><a href="#biography" class="the-read-more-link">Read more</p>';
    }
    else {
      $vars['attributes']['id'] = 'biography';
    }
  }

  if ($field_name === 'field_dimensions') {
    // Hide empty length values.
    if (isset($vars["items"][0]["content"]["#length"]) && $vars["items"][0]["content"]["#length"] === '0.00') {
      $vars["items"][0]["content"]["#length"] = NULL;
    }
    // Show dimensions unit from parent.
    if (isset($vars["element"]["#object"])) {
      $parent = $vars["element"]["#object"];
      if ($parent->hasField('field_dimensions_unit') && !$parent->get('field_dimensions_unit')->isEmpty()) {
        $unit = $parent->get('field_dimensions_unit')->getString();
        $vars["items"][0]['content']['#unit']  = $unit;
      }
    }
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function the_content_theme_suggestions_volume_components_field_formatter_alter(array &$suggestions, array &$variables) {
  $suggestions[] = 'volume_components_field_formatter__the';
}

/**
 * Implements hook_theme().
 */
function the_content_theme($existing, $type, $theme, $path) {
  return [
    'volume-components-field-formatter--the' => [
      'base hook' => 'volume-components-field-formatter',
    ],
  ];
}